#!/bin/sh

set -e

print_help() {
    # shellcheck disable=SC2016 # This is a literal string and is not intended to be expanded.
    printf '
    ███████╗ ████▄    ██╗  ██╗ 
    ██╔════╝ ██╔═▀█╗  ██║▄█▀╔╝
    ███████╗ ██║  ██╗ ████╔╝
    ╚════██║ ██║ ▄█╔╝ ██╔▀█▄
    ███████║ ████▀╔╝  ██║ ╚██╗
    ╚══════╝ ╚════╝   ╚═╝  ╚═╝
Script Development Kit Module Finder
---
Finds the given sdk module and prints its contents to stdout
to be used in shell scripts.

Example:
    eval "$(sdkmod logging)"
    log info "There are $(sdkmod -l 2>/dev/null | wc -l) SDK modules available on this system."

Usage:
    sdkmod <module_name>
    sdkmod -h | --help
    sdkmod -l | --list

Parameters:
    - module_name: The name of the SDK module to print.
Arguments:
    - -h, --help: Print this help message.
    - -l, --list: Print available SDK modules to stdout.

' 1>&2
}

list_modules() {
    module_dir="/usr/local/lib/vscode-dev-containers/features/sdk/modules"

    if [ ! -d "$module_dir" ]; then
        echo "Module directory not found: $module_dir" 1>&2
        return 1
    fi

    modules="$(find "$module_dir" -type f -name "*.sh" -exec basename {} .sh \; 2>/dev/null | sort)"

    num_modules=$(echo "$modules" | wc -l)
    if [ "$num_modules" -eq 0 ]; then
        echo "No modules found." 1>&2
        return 1
    fi

    echo "$num_modules SDK modules are available on this system." 1>&2
    for m in $modules; do
        echo "$m"
    done
}

print_module() {
    module_name="$1"
    module_path="/usr/local/lib/vscode-dev-containers/features/sdk/modules/${module_name}.sh"

    if [ ! -f "$module_path" ]; then
        echo "Package not found: $module_name" 1>&2
        return 1
    fi

    cat "$module_path" 2>/dev/null || {
        echo "Failed to read package: $module_name" 1>&2
        return 1
    }
    return 0
}

main() {
    if ! expr "$SHELL" : '.*bash.*' >/dev/null 2>&1; then
        echo "SDK Modules are only designed to work with bash!" 1>&2
        echo "" 1>&2
    fi

    if [ "$#" -eq 0 ]; then
        print_help
        return 1
    fi

    if [ "$#" -gt 1 ]; then
        echo "Invalid argument(s): $*" 1>&2
        echo "" 1>&2
        print_help
        return 1
    fi

    if expr "$*" : '[[:space:]]*--help[[:space:]]*' >/dev/null 2>&1 ||
        expr "$*" : '[[:space:]]*-h[[:space:]]*' >/dev/null 2>&1; then
        print_help
        return 0
    elif expr "$*" : '[[:space:]]*--list[[:space:]]*' >/dev/null 2>&1 ||
        expr "$*" : '[[:space:]]*-l[[:space:]]*' >/dev/null 2>&1; then
        list_modules
        return 0
    fi

    for pkg in "$@"; do
        if expr "$pkg" : '--.*' >/dev/null 2>&1 ||
            expr "$pkg" : '-.*' >/dev/null 2>&1; then
            echo "Invalid argument name: $pkg" 1>&2
            echo "" 1>&2
            print_help
            return 1
        fi

        print_module "$pkg"
    done

    return 0
}

if [ "$(basename "$0")" = "sdkmod" ]; then
    main "$@"
else
    echo "This script is not intended to be sourced." 1>&2
fi
